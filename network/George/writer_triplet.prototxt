name: "WRITER"

layer {
  name: "input"
  type: "Data"
  top: "triplet_data"
  top: "label"
  data_param {
    source: "../train_db_rand"
    batch_size: 100
  }

  include: { phase: TRAIN }
}

layer {
  name: "slice_triplet"
  type: "Slice"
  bottom: "triplet_data"
  top: "data"
  top: "data_p"
  top: "data_d"
  slice_param {
      slice_point: 1
      slice_point: 2
  }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param { name: "conv1_w" lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { name: "conv1_b" lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv1_p"
  type: "Convolution"
  bottom: "data_p"
  top: "conv1_p"
  param { name: "conv1_w" lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { name: "conv1_b" lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv1_d"
  type: "Convolution"
  bottom: "data_d"
  top: "conv1_d"
  param { name: "conv1_w" lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { name: "conv1_b" lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "pool1_p"
  type: "Pooling"
  bottom: "conv1_p"
  top: "pool1_p"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "pool1_d"
  type: "Pooling"
  bottom: "conv1_d"
  top: "pool1_d"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param { name: "conv2_w" lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { name: "conv2_b" lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv2_p"
  type: "Convolution"
  bottom: "pool1_p"
  top: "conv2_p"
  param { name: "conv2_w" lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { name: "conv2_b" lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "conv2_d"
  type: "Convolution"
  bottom: "pool1_d"
  top: "conv2_d"
  param { name: "conv2_w" lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { name: "conv2_b" lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "pool2_p"
  type: "Pooling"
  bottom: "conv2_p"
  top: "pool2_p"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "pool2_d"
  type: "Pooling"
  bottom: "conv2_d"
  top: "pool2_d"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param { name: "ip1_w" lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { name: "ip1_b" lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "ip1_p"
  type: "InnerProduct"
  bottom: "pool2_p"
  top: "ip1_p"
  param { name: "ip1_w" lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { name: "ip1_b" lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "ip1_d"
  type: "InnerProduct"
  bottom: "pool2_d"
  top: "ip1_d"
  param { name: "ip1_w" lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { name: "ip1_b" lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "relu1_p"
  type: "ReLU"
  bottom: "ip1_p"
  top: "ip1_p"
}
layer {
  name: "relu1_d"
  type: "ReLU"
  bottom: "ip1_d"
  top: "ip1_d"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "descriptor"
  param { name: "ip2_w" lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { name: "ip2_b" lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  inner_product_param {
    num_output: 16
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "ip2_p"
  type: "InnerProduct"
  bottom: "ip1_p"
  top: "descriptor_p"
  param { name: "ip2_w" lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { name: "ip2_b" lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  inner_product_param {
    num_output: 16
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "ip2_d"
  type: "InnerProduct"
  bottom: "ip1_d"
  top: "descriptor_d"
  param { name: "ip2_w" lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { name: "ip2_b" lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  inner_product_param {
    num_output: 16
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "lossTriplet"
  type: "TripletLoss"
  bottom: "descriptor"
  bottom: "descriptor_p"
  bottom: "descriptor_d"
  top: "lossTriplet"
  loss_weight : 10
  triplet_loss_param {
        margin : 0.1
  }
}

layer {
  name: "lossPair"
  type: "ContrastiveLoss"
  bottom: "descriptor"
  bottom: "descriptor_p"
  bottom: "label"
  top: "lossPair"
  loss_weight : 10
}

