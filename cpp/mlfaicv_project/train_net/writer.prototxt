name: "LINEMOD"

layer {
  name: "input"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "train_db"
    batch_size: 64
  }

  include: { phase: TRAIN }

}

layer {

  name: "input"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "test_db"
    batch_size: 64
  }

  include: { phase: TEST }
}



layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param { lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param { lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  convolution_param {
    num_output: 50
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool2"
  top: "ip1"
  param { lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  inner_product_param {
    num_output: 500
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "ip1"
  top: "ip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param { lr_mult: 1 decay_mult: 1 }  	# learning rate and decay multipliers for the filters
  param { lr_mult: 2 decay_mult: 0 }	# learning rate multiplier for the biases
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"

  include: { phase: TEST }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
